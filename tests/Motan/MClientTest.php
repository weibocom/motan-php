<?php
namespace Motan;
define('DEFAULT_GROUP', 'motan-demo-rpc');
define('DEFAULT_SERVICE', 'com.weibo.HelloMTService');
define('DEFAULT_PROTOCOL', 'motan2');

/**
 * Generated by PHPUnit_SkeletonGenerator on 2019-01-09 at 00:43:02.
 */
class MClientTest extends \PHPUnit\Framework\TestCase
{
    /**
     * @var MClient
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp() : void
    {
        $this->object = new MClient();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    public function tearDown() : void
    {
    }

    /**
     * @covers Motan\MClient::doCall
     * @todo   Implement testDoCall().
     */
    public function testDoCall()
    {
        $req1 = new Request(DEFAULT_SERVICE, 'Hello', "testmsg");
        $res = $this->object->doCall($req1, "testmsg");
        $this->assertEquals("hello testmsg", $res);
    }

    /**
     * @covers Motan\MClient::doMultiCall
     * @todo   Implement testDoMultiCall().
     */
    public function testDoMultiCall()
    {
        $req1 = new Request(DEFAULT_SERVICE, 'Hello', "testmsg");
        $req2 = new Request(DEFAULT_SERVICE, 'HelloX', 'string', 123,124,['string','arr']);
        $req1->setGroup(DEFAULT_GROUP);
        $req2->setGroup(DEFAULT_GROUP);
        $multi_resp =  $this->object->doMultiCall([
            $req1, $req2
        ]);
        $this->assertEquals("hello testmsg", $multi_resp->getRs($req1));

        $rs_empty = $this->object->doMultiCall([]);
        $this->assertEquals([], $rs_empty);
    }

    /**
     * @covers Motan\MClient::doMultiCall
     * @todo   Implement testGetMRs().
     */
    public function testGetMRs()
    {
        $req1 = new Request(DEFAULT_SERVICE, 'Hello', "testmsg");
        $req2 = new Request(DEFAULT_SERVICE, 'HelloX', 'string', 123,124,['string','arr']);
        $req1->setGroup(DEFAULT_GROUP);
        $req2->setGroup(DEFAULT_GROUP);
        $multi_resp =  $this->object->doMultiCall([
            $req1, $req2
        ]);
        $rs = $multi_resp->getRs($req1);
        $this->assertEquals("hello testmsg", $rs);
    }

    /**
     * @covers Motan\MClient::doMultiCall
     * @todo   Implement testGetMException().
     */
    public function testGetMException()
    {
        $req1 = new Request(DEFAULT_SERVICE, 'Hello', "testmsg");
        $req2 = new Request(DEFAULT_SERVICE, 'HelloX', 'string', 123,124,['string','arr']);
        $req1->setGroup(DEFAULT_GROUP);
        $req2->setGroup(DEFAULT_GROUP);
        $multi_resp =  $this->object->doMultiCall([
            $req1, $req2
        ]);
        $rs = $multi_resp->getException($req2);
        $this->assertEquals('{"errcode":500,"errmsg":"method HelloX is not found in provider.","errtype":1}', $rs);
    }
}
